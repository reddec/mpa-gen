// Code generated by mpa-gen DO NOT EDIT.
package utils

import (
	"html/template"
	"io/ioutil"
	"path/filepath"
    "sync"
    "net/http"
    "github.com/gin-gonic/gin"
    "github.com/gin-contrib/gzip"
    "{{our_pkg}}/service"
    {%- for section in sections %}
    section{{ loop.index }} "{{ section }}"
    {%- endfor %}
)

type key struct {
	layout, view string
}

type LocalTemplates struct {
	Root string `long:"root" env:"ROOT" description:"Root directory for templates" default:"./templates"`
	Live bool   `long:"live" env:"LIVE" description:"Disable cache for templates"`

	pageCache map[key]*template.Template
	pageLock  sync.RWMutex
}

func (lr *LocalTemplates) Get(layout, view string) *template.Template {
	if lr.Live {
		return lr.parse(layout, view)
	}
	k := key{
		layout: layout,
		view:   view,
	}
	lr.pageLock.RLock()
	tpl := lr.pageCache[k]
	lr.pageLock.RUnlock()
	if tpl != nil {
		return tpl
	}

	lr.pageLock.Lock()
	defer lr.pageLock.Unlock()
	tpl = lr.pageCache[k]
	if tpl != nil {
		return tpl
	}
	tpl = lr.parse(layout, view)
	if lr.pageCache == nil {
		lr.pageCache = map[key]*template.Template{}
	}
	lr.pageCache[k] = tpl
	return tpl
}

func (lr *LocalTemplates) parse(layout, view string) *template.Template {
	layoutData, err := ioutil.ReadFile(filepath.Join(lr.Root, "layouts", layout))
	if err != nil {
		panic(err)
	}
	viewData, err := ioutil.ReadFile(filepath.Join(lr.Root, "views", view))
	if err != nil {
		panic(err)
	}

	root := template.New("")
	if _, err := root.Parse(string(layoutData)); err != nil {
		panic(err)
	}
	if _, err := root.Parse(string(viewData)); err != nil {
		panic(err)
	}
	return root
}

type WebConfig struct {
    LocalTemplates
    Binding   string `long:"binding" env:"BINDING" description:"Bind server" default:"localhost:8080"`
    Static    string `long:"static" env:"STATIC" description:"Static directory" default:"static"`
    Redirect  string `long:"redirect" env:"REDIRECT" description:"Redirect to default page" default:"portal/main"`
}

func (cfg WebConfig) Create(app *service.Application, templates interface {
	Get(layout, view string) *template.Template
}) *gin.Engine {
	root := gin.Default()
    root.Use(gzip.Gzip(gzip.DefaultCompression))
    root.GET("/", func(gctx *gin.Context) {
		gctx.Redirect(http.StatusTemporaryRedirect, cfg.Redirect)
	})
	root.Static("/static", cfg.Static)
    {%- for section in sections %}
    section{{ loop.index }}.New(app, templates).Mount(root.Group(section{{ loop.index }}.Section))
    {%- endfor %}
	return root
}

func (cfg WebConfig) Serve(app *service.Application) error {
	root := cfg.Create(app, &cfg.LocalTemplates)
	return root.Run(cfg.Binding)
}